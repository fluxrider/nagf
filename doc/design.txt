Not Another Gamedev Framework Distributed Edition

belief
- GPL servers, BSD utils (e.g. close source games, but servers can be patched, new input or features added afterwards, new gfx api 20 years later)
- out of band controls (e.g. nagf-evt-ctl enable print)
- app and servers are completely free of language barrier (and communicate with ipc)

IPC
- must be readily available in most language (i.e. C, python, and maybe even java) and OS (Linux, and in future versions Windows)
- multiple writers, one reader

- non-blocking sends (e.g. cache this, fire this sound, show fps)
 [mkfifo, named pipe, socketpair]
  + language neutral, it's as easy as using a normal file
  + should be easy to have something similar in windows
  + multiple writers should be simple (unless message is longer than the pipe buffer size, read more to make sure you do it right]
 
- blocking send/receive communication (e.g. get load progress)
- blocking send (i.e. send with ack) (e.g. swap input back buffer before I use the data)
 [shared memory and semaphores]
  + it ain't language neutral but java could use jni, and python ctypes
    java: jni shm_open/mmap and return newdirectbytearray
    python: mmap.mmap but need to shm_open via ctypes, and if server the trunc part too
 
evt
- has double buffering (e.g. app sends a message to swap)
- is responsible for input events (i.e. inputs, not window)
- ctl like fake_input
- [originally, I thought this server had to be the one creating the window, but I'm happy it is not the case. At least on Linux, I can poll input events without the need of a window]
- message layout
 buttons held state (1 bit)
 buttons pressed count since last check (2 bits, from 0 to 3)
 buttons released count since last check (2 bits, from 0 to 3)
 buttons include all keyboard buttons of interest (i.e. letters, numbers, arrows, esc, tab, alts, shifts, spacebar, ctrls, F1-12, enter, backspace, backtick, [], pgup/down, ,.;'\/)
 buttons also include MC x mouse left, right, middle
 buttons also include GC x nagf-gamepad mappings (i.e. R1-3, L1-3, start, home, select, north/south/east/west, up/down/left/right)
 MC x mouse movement (x, y, wheel) signed byte
 GC x nagf-gamepad mapping of AXIS-LX/LY/RX/RY, TRIGGER-L/R which overlap in meaning with whichever R/L amongst 1-3 is a trigger, all of which are a normalized signed byte (127 to -127, to mean 1 to -1)
 Recap:
  Buttons:
    1 kbd x A-Z,0-9,up/down/left/right,esc,tab,altL/R,ctrlL/R,SHIFTL/R,spacebar,F1-12,enter,backspace,pgup/down,`[].;'\/, (where the last comma is included)
     = 26+10+4+9+12+4+9 = 74 buttons
    MC mouse x L/R/M
     = MC * 3 buttons
    KC gamepad x R1-3, L1-3, start, home, select, north/south/east/west, up/down/left/right
     = KC * 17 buttons
    each buttons is stores as held (1 bit) / pressed (P bits) / released (R bits)
    = (74 + MC * 3 + KC * 17) * (1 + P + R)
    = 462 bits, or 57.75 bytes (MC=4, KC=4, P=1, R=1) [low bound of what is acceptable]
    = 1170 bits, or 146.25 bytes (MC=8, KC=8, P=2, R=2) [high bound of what is overkill]
    = 616 bits, or 77 bytes (MC=4, KC=4, P=2, R=1) [my design pick]
 Relative:
   4 mouse * x,y,wheel, a byte each = 12 bytes
 Absolute:
   4 nagf-gamepad * AXIS-LX/LY/RX/RY, TRIGGER-L/R, a byte each = 24 bytes
 Total:
  113 bytes messages

snd
- handles loading formats (e.g. ogg, mp3, wav)
- cache clips, fires thems (i.e. fx)
- stream songs
- ctl like zap from cache, list cache
- support for procedural data
- volume is always combo of two parameters (cubic and linear), I detest the one slider paradigm (normalized [0-1] of course)
- status debug spew request (e.g. show currently playing bg song, position, duration, volumes)
- stack of bg song, which takes care of pause/resume. This makes it unecessary for the client to query the position of the song.

gfx
- is responsible for the window, title, icon
- handles loading image formats (e.g. png)
- handles loading font formats
- hides complexity of font rendering
- draw image (scale, rotate, fill area while respecting aspect ratio)
- ctl like show_fps, list cache, zap cache entry
- current goal is to support 2D stuff. 3D would be a version 2 thing.
- drives animations (to keep application as light as possible)

dsk or mem
- handles file i/o
- handles complexity of parsing
- potential for auto-save on mem change or time interval

